/**
 * Check if account has bytecode (is a contract)
 */

const { createPublicClient, http } = require('viem');

const monadTestnet = {
  id: 10143,
  name: "Monad Testnet",
  network: "monad-testnet",
  nativeCurrency: { name: "MON", symbol: "MON", decimals: 18 },
  rpcUrls: { 
    default: { 
      http: ["https://rpc.monad-testnet.fastlane.xyz/eyJhIjoiMHhhZkRCOWVFMTMxOEFFYUFhMkVlM0U3YTA4NTAyMDAyODc1RjA0MkNBIiwidCI6MTc2MDE4NjEyNSwicyI6IjB4ODAyODYxNGU1OWNhYmUzN2RlZTI2OGNhNzU2YTkyODJiZmNkY2U1OWZlYWJjYTc1MWY2NGI0YWI0ZDZlODUyNzQyYzcyZThmNmQxNDZkNjJkZDk3M2MxZTY5MWZiY2ZmOGMxZDc0NGM2ODg5NTQ3ODZkYmMwOGJmNTlkZjU4OGIxYyJ9"] 
    } 
  }
};

async function checkAccountCode() {
  try {
    const accounts = [
      { name: "Smart Account A", address: "0x1bd5aCb8069DA1051911eB80A37723aA1ce5919C" },
      { name: "Smart Account B", address: "0xa51DbFfE49FA6Fe3fC873094e47184aE624cd76f" },
      { name: "DelegationManager", address: "0xdb9B1e94B5b69Df7e401DDbedE43491141047dB3" }
    ];
    
    const publicClient = createPublicClient({
      chain: monadTestnet,
      transport: http(monadTestnet.rpcUrls.default.http[0], {
        timeout: 60000,
        retryCount: 3,
        retryDelay: 3000
      })
    });
    
    console.log("üîç Checking account bytecode...");
    console.log("");
    
    for (const account of accounts) {
      console.log(`${account.name}:`);
      console.log(`  Address: ${account.address}`);
      
      const code = await publicClient.getCode({ address: account.address });
      
      if (!code || code === '0x') {
        console.log(`  Code: ‚ùå EMPTY (EOA or not deployed)`);
      } else {
        console.log(`  Code: ‚úÖ HAS CODE (${code.length} bytes)`);
        console.log(`  Code preview: ${code.slice(0, 66)}...`);
      }
      console.log("");
    }
    
    console.log("========================================");
    console.log("‚ö†Ô∏è DIAGNOSIS:");
    console.log("========================================");
    
    const codeA = await publicClient.getCode({ address: accounts[0].address });
    const codeB = await publicClient.getCode({ address: accounts[1].address });
    
    if (!codeA || codeA === '0x') {
      console.log("‚ùå PROBLEM FOUND!");
      console.log("");
      console.log("Smart Account A (0x1bd5...) kh√¥ng c√≥ bytecode!");
      console.log("");
      console.log("üí° GI·∫¢I PH√ÅP:");
      console.log("1. Smart Account A l√† EOA ƒë∆∞·ª£c 'upgrade' qua EIP-7702");
      console.log("2. NH∆ØNG transaction 0x26337a459b7bb0c46003a6e3da6224e2a00f8c9625915c928be8984c5617a9b4");
      console.log("   ch·ªâ l√† proxy deployment, KH√îNG ph·∫£i Smart Account A deployment!");
      console.log("");
      console.log("3. B·∫°n C·∫¶N deploy Smart Account A th·∫≠t s·ª±:");
      console.log("   a) V√†o /delegation");
      console.log("   b) Connect V√≠ A (EOA 0x1bd5...)");
      console.log("   c) Click 'Deploy Smart Account via Factory'");
      console.log("   d) Sau khi deploy, Smart Account A s·∫Ω c√≥ ƒë·ªãa ch·ªâ KH√ÅC (kh√¥ng ph·∫£i 0x1bd5...)!");
      console.log("");
      console.log("4. SAU ƒê√ì:");
      console.log("   - Transfer USDC t·ª´ EOA A ƒë·∫øn Smart Account A m·ªõi");
      console.log("   - T·∫°o delegation M·ªöI v·ªõi Smart Account A address m·ªõi");
      console.log("   - Redeem delegation");
    } else if (!codeB || codeB === '0x') {
      console.log("‚ùå Smart Account B kh√¥ng c√≥ bytecode!");
    } else {
      console.log("‚úÖ C·∫£ 2 Smart Accounts ƒë·ªÅu c√≥ bytecode!");
      console.log("");
      console.log("ü§î N·∫øu v·∫´n revert, c√≥ th·ªÉ do:");
      console.log("1. Delegation signature kh√¥ng h·ª£p l·ªá");
      console.log("2. Caveat enforcer reject (periodAmount, timestamp, etc.)");
      console.log("3. DelegationManager logic issue");
    }
    
  } catch (error) {
    console.error("‚ùå Error:", error.message);
  }
}

checkAccountCode();


